{"ast":null,"code":"var _jsxFileName = \"/Users/christiandavid/Desktop/formations/cours/react/tp/la-maison-jungle/src/components/CareScale.js\";\nimport Sun from \"../assets/sun.svg\";\nimport Water from \"../assets/water.svg\"; // Ici, il s'agit d'une manière de faire.\n//Vous auriez aussi pu utiliser une fonction qui retourne l'élément souhaité, ou bien faire directement des conditions\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst quantityLabel = {\n  1: 'peu',\n  2: 'modérément',\n  3: 'beaucoup'\n};\n\nfunction CareScale({\n  scaleValue,\n  careType\n}) {\n  const range = [1, 2, 3];\n  const scaleType = careType === 'light' ? /*#__PURE__*/_jsxDEV(\"img\", {\n    src: Sun,\n    alt: \"sun-icon\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 4\n  }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n    src: Water,\n    alt: \"water-icon\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 4\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onclick: () => alert(`Cette plante requiert ${quantityLabel[scaleValue]} ${careType === 'light' ? 'de lumière' : \"d'arrosage\"}`),\n    children: range.map(rangeElem => scaleValue >= rangeElem ? /*#__PURE__*/_jsxDEV(\"span\", {\n      children: scaleType\n    }, rangeElem.toString(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 6\n    }, this) : null)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 3\n  }, this);\n}\n\n_c = CareScale;\nexport default CareScale;\n\nvar _c;\n\n$RefreshReg$(_c, \"CareScale\");","map":{"version":3,"sources":["/Users/christiandavid/Desktop/formations/cours/react/tp/la-maison-jungle/src/components/CareScale.js"],"names":["quantityLabel","CareScale","scaleValue","careType","range","scaleType","Sun","Water","alert","map","rangeElem","toString"],"mappings":";;yCAGA;AACA;;;AACA,MAAMA,aAAa,GAAG;AACrB,KAAG,KADkB;AAErB,KAAG,YAFkB;AAGrB,KAAG;AAHkB,CAAtB;;AAMA,SAASC,SAAT,CAAmB;AAAEC,EAAAA,UAAF;AAAcC,EAAAA;AAAd,CAAnB,EAA6C;AAC5C,QAAMC,KAAK,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAd;AACA,QAAMC,SAAS,GACdF,QAAQ,KAAK,OAAb,gBACC;AAAK,IAAA,GAAG,EAAEG,GAAV;AAAe,IAAA,GAAG,EAAC;AAAnB;AAAA;AAAA;AAAA;AAAA,UADD,gBAGC;AAAK,IAAA,GAAG,EAAEC,KAAV;AAAiB,IAAA,GAAG,EAAC;AAArB;AAAA;AAAA;AAAA;AAAA,UAJF;AAOA,sBACC;AACC,IAAA,OAAO,EAAE,MACRC,KAAK,CACH,yBAAwBR,aAAa,CAACE,UAAD,CAAa,IAClDC,QAAQ,KAAK,OAAb,GAAuB,YAAvB,GAAsC,YACtC,EAHG,CAFP;AAAA,cASEC,KAAK,CAACK,GAAN,CAAWC,SAAD,IACVR,UAAU,IAAIQ,SAAd,gBACC;AAAA,gBAAkCL;AAAlC,OAAWK,SAAS,CAACC,QAAV,EAAX;AAAA;AAAA;AAAA;AAAA,YADD,GAEI,IAHJ;AATF;AAAA;AAAA;AAAA;AAAA,UADD;AAiBA;;KA1BQV,S;AA4BT,eAAeA,SAAf","sourcesContent":["import Sun from '../assets/sun.svg'\nimport Water from '../assets/water.svg'\n\n// Ici, il s'agit d'une manière de faire.\n//Vous auriez aussi pu utiliser une fonction qui retourne l'élément souhaité, ou bien faire directement des conditions\nconst quantityLabel = {\n\t1: 'peu',\n\t2: 'modérément',\n\t3: 'beaucoup'\n}\n\nfunction CareScale({ scaleValue, careType }) {\n\tconst range = [1, 2, 3]\n\tconst scaleType =\n\t\tcareType === 'light' ? (\n\t\t\t<img src={Sun} alt='sun-icon' />\n\t\t) : (\n\t\t\t<img src={Water} alt='water-icon' />\n\t\t)\n\n\treturn (\n\t\t<div\n\t\t\tonclick={() =>\n\t\t\t\talert(\n\t\t\t\t\t`Cette plante requiert ${quantityLabel[scaleValue]} ${\n\t\t\t\t\t\tcareType === 'light' ? 'de lumière' : \"d'arrosage\"\n\t\t\t\t\t}`\n\t\t\t\t)\n\t\t\t}\n\t\t>\n\t\t\t{range.map((rangeElem) =>\n\t\t\t\tscaleValue >= rangeElem ? (\n\t\t\t\t\t<span key={rangeElem.toString()}>{scaleType}</span>\n\t\t\t\t) : null\n\t\t\t)}\n\t\t</div>\n\t)\n}\n\nexport default CareScale"]},"metadata":{},"sourceType":"module"}